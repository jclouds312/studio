// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  engineType = "dataproxy"
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  name                    String
  password                String?
  role                    String   @default("TRABAJADOR") // TRABAJADOR, EMPRESA, ADMIN
  avatar                  String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  status                  String?
  professionalSummary     String?
  experience              String?
  savedJobIds             String? // Storing as a JSON string
  subscriptionPlan        String?
  subscriptionUntil       DateTime?
  companyProfileId        String?  @unique
  
  // Relations
  applications            Application[]
  premiumSubscriptions    EmpresaPremium[]
  savedJobs               SavedJob[]
  transactions            MercadoPagoTransactions[]
  companyProfile          CompanyProfile?
}

model CompanyProfile {
  id        String   @id @default(cuid())
  userId    String   @unique // Link to the user who owns this company profile
  name      String
  cuit      String?
  address   String?
  city      String?
  province  String?
  phone     String?
  logoUrl   String?
  status    String?
  description String?
  
  // Relations
  jobs      Job[]
  user      User     @relation(fields: [userId], references: [id])
}

model Job {
  id                  String   @id @default(cuid())
  title               String
  company             String
  companyLogo         String?
  companyProfileId    String?
  location            String
  type                String
  category            String
  description         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isFeatured          Boolean  @default(false)
  isNew               Boolean  @default(false)
  whatsapp            String?
  salary              String?
  skills              String? // Storing as a JSON string
  customQuestions     String? // Storing as a JSON string
  horario             String?
  modalidad           String?
  direccionCompleta   String?
  imageUrl            String?
  applicantsCount     Int      @default(0)

  // Relations
  companyProfile      CompanyProfile? @relation(fields: [companyProfileId], references: [id])
  applications        Application[]
  savedJobs           SavedJob[]
}

model Application {
  id              String   @id @default(cuid())
  userId          String
  jobId           String
  status          String
  createdAt       DateTime @default(now())
  // Custom field not in SQL, Prisma handles JSON well
  customAnswers   String? // Storing as a JSON string

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  job             Job      @relation(fields: [jobId], references: [id])
}

model SavedJob {
  id     String @id @default(cuid())
  userId String
  jobId  String

  // Relations
  user   User @relation(fields: [userId], references: [id])
  job    Job  @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}

// These models were in your SQL but not yet fully integrated.
// I've kept them for future use.

model PlanPremium {
    id              String   @id @default(cuid())
    name            String
    price           Float
    durationDays    Int
    
    // Relations
    empresas        EmpresaPremium[]
}

model EmpresaPremium {
    id              String      @id @default(cuid())
    userId          String
    planId          String
    startDate       DateTime    @default(now())
    endDate         DateTime?
    
    // Relations
    user            User        @relation(fields: [userId], references: [id])
    plan            PlanPremium @relation(fields: [planId], references: [id])
}

model MercadoPagoTransactions {
    id              String      @id @default(cuid())
    userId          String
    paymentId       String
    amount          Float
    status          String
    createdAt       DateTime    @default(now())

    // Relations
    user            User        @relation(fields: [userId], references: [id])
}
