// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  engineType      = "library"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model with roles and social login info
model User {
  id               String  @id @default(cuid())
  name             String
  email            String  @unique
  password         String?
  role             String  @default("TRABAJADOR") // TRABAJADOR, EMPRESA, ADMIN
  socialProvider   String? // google, facebook, microsoft
  socialId         String? // ID from the social provider
  avatar           String?
  phone            String?
  location         String?
  professionalSummary String?
  experience       String?
  savedJobIds      String? // Storing as JSON string
  status           String?
  subscriptionPlan String?
  subscriptionUntil DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  applications          Application[]
  savedJobs             SavedJob[]
  transactions          MercadoPagoTransactions[]
  companyProfile        CompanyProfile?
  premiumSubscriptions  EmpresaPremium[]
}

// CompanyProfile model linked to a User
model CompanyProfile {
  id        String   @id @default(cuid())
  userId    String   @unique // Link to the user who owns this company profile
  name      String
  cuit      String?
  address   String?
  city      String?
  province  String?
  phone     String?
  logoUrl   String?
  status    String?  // Activa, Inactiva, Pendiente
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  description String?

  // Relations
  user User  @relation(fields: [userId], references: [id])
  jobs Job[]
}

// PlanPremium model for subscription plans
model PlanPremium {
  id           String   @id @default(cuid())
  name         String
  price        Float
  durationDays Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  empresasPremium EmpresaPremium[]
}

// EmpresaPremium model to associate a company with its premium plan
model EmpresaPremium {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User        @relation(fields: [userId], references: [id])
  plan PlanPremium @relation(fields: [planId], references: [id])
}

// Job model for job postings
model Job {
  id                String   @id @default(cuid())
  title             String
  description       String?
  isFeatured        Boolean  @default(false)
  isNew             Boolean  @default(true)
  company           String
  companyLogo       String?
  location          String
  type              String   // Full-time, Part-time, etc.
  category          String
  whatsapp          String?
  salary            String?
  skills            String? // Storing as JSON string
  customQuestions   String? // Storing as JSON string
  horario           String?
  modalidad         String?
  direccionCompleta String?
  imageUrl          String?
  applicantsCount   Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  companyProfileId  String?
  
  // Relations
  applications      Application[]
  savedBy           SavedJob[]
  companyProfile    CompanyProfile? @relation(fields: [companyProfileId], references: [id])
}

// Application model for job applications
model Application {
  id            String   @id @default(cuid())
  userId        String
  jobId         String
  isPremium     Boolean  @default(false)
  status        String   @default("EN_REVISION")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  customAnswers String? // Storing as JSON string

  // Relations
  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}

// SavedJob model for saved job listings
model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}

// MercadoPagoTransactions model
model MercadoPagoTransactions {
  id        String   @id @default(cuid())
  userId    String
  paymentId String
  amount    Float
  status    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}
