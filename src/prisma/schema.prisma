// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Generate multiple binary targets to ensure compatibility with different OpenSSL versions
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// MODELS

// Model for User accounts
model User {
  id               String          @id @default(cuid())
  name             String
  email            String          @unique
  password         String?
  role             String          @default("TRABAJADOR") // TRABAJADOR, EMPRESA, ADMIN
  socialProvider   String?
  socialId         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  // Profile specific data for workers
  professionalSummary String?
  experience          String?
  
  // Relationships
  applications      Application[]
  savedJobs         SavedJob[]
  transactions      MercadoPagoTransactions[]
  premiumSubscriptions EmpresaPremium[]
  companyProfile    CompanyProfile?
}

// Model for Company profiles, linked to a User
model CompanyProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  cuit      String   @unique
  address   String?
  city      String
  province  String
  phone     String?
  logoUrl   String?
  status    String   @default("Pendiente") // Activa, Inactiva, Pendiente
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A company can have multiple job listings
  jobs Job[]
}

// Model for Job listings
model Job {
  id                String   @id @default(cuid())
  title             String
  description       String?
  isFeatured        Boolean  @default(false)
  isNew             Boolean  @default(false) // Can be set programmatically
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Job specific details
  company           String
  location          String
  type              String   // Full-time, Part-time, Contract, Changa
  category          String   // tech, design, etc.
  salary            String?
  skills            String? // Stored as a JSON string: "[\"React\", \"Node.js\"]"
  customQuestions   String? // Stored as a JSON string: "[\"Question 1?\", \"Question 2?\"]"
  horario           String?
  modalidad         String?  // Presencial, HÃ­brido, Remoto
  direccionCompleta String?
  whatsapp          String?
  imageUrl          String?
  applicantsCount   Int      @default(0)

  // Relationships
  companyProfileId  String?
  companyProfile    CompanyProfile? @relation(fields: [companyProfileId], references: [id])
  applications      Application[]
  savedBy           SavedJob[]
}

// Model for Premium Plans
model PlanPremium {
  id           String   @id @default(cuid())
  name         String
  price        Float
  durationDays Int
  createdAt    DateTime @default(now())

  // Relationships
  empresas EmpresaPremium[]
}

// Junction table for companies subscribed to premium plans
model EmpresaPremium {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  plan      PlanPremium @relation(fields: [planId], references: [id])
}

// Model for Job Applications
model Application {
  id             String   @id @default(cuid())
  userId         String
  jobId          String
  isPremium      Boolean  @default(false)
  status         String   @default("EN_REVISION") // EN_REVISION, CONTACTADO, RECHAZADO
  createdAt      DateTime @default(now())
  
  // Stored as a JSON string: "[{\"question\":\"Q1\",\"answer\":\"A1\"}]"
  customAnswers  String?
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}

// Model for Saved Jobs by Users
model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}

// Model for MercadoPago Transactions
model MercadoPagoTransactions {
  id        String   @id @default(cuid())
  userId    String
  paymentId String
  amount    Float
  status    String
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id])
}
